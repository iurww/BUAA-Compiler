//
// Created by wwr on 2023/11/6.
//

#include "../../include/frontend/Token.h"

std::unordered_map<std::string, TokenType> operator_to_token = {
        {"!",  TokenType::NOT},
        {"&&", TokenType::AND},
        {"||", TokenType::OR},
        {"+",  TokenType::PLUS},
        {"-",  TokenType::MINU},
        {"*",  TokenType::MULT},
        {"/",  TokenType::DIV},
        {"%",  TokenType::MOD},
        {"<",  TokenType::LSS},
        {"<=", TokenType::LEQ},
        {">",  TokenType::GRE},
        {">=", TokenType::GEQ},
        {"==", TokenType::EQL},
        {"!=", TokenType::NEQ},
        {"=",  TokenType::ASSIGN},
        {";",  TokenType::SEMICN},
        {",",  TokenType::COMMA},
        {"(",  TokenType::LPARENT},
        {")",  TokenType::RPARENT},
        {"[",  TokenType::LBRACK},
        {"]",  TokenType::RBRACK},
        {"{",  TokenType::LBRACE},
        {"}",  TokenType::RBRACE},
};

std::unordered_map<std::string, TokenType> reserve_to_token = {
        {"main",     TokenType::MAINTK},
        {"const",    TokenType::CONSTTK},
        {"int",      TokenType::INTTK},
        {"break",    TokenType::BREAKTK},
        {"continue", TokenType::CONTINUETK},
        {"if",       TokenType::IFTK},
        {"else",     TokenType::ELSETK},
        {"for",      TokenType::FORTK},
        {"getint",   TokenType::GETINTTK},
        {"printf",   TokenType::PRINTFTK},
        {"return",   TokenType::RETURNTK},
        {"void",     TokenType::VOIDTK},
};

std::unordered_map<TokenType, std::string> token_name = {
        {TokenType::IDENFR,     "IDENFR"},
        {TokenType::INTCON,     "INTCON"},
        {TokenType::STRCON,     "STRCON"},
        {TokenType::MAINTK,     "MAINTK"},
        {TokenType::CONSTTK,    "CONSTTK"},
        {TokenType::INTTK,      "INTTK"},
        {TokenType::BREAKTK,    "BREAKTK"},
        {TokenType::CONTINUETK, "CONTINUETK"},
        {TokenType::IFTK,       "IFTK"},
        {TokenType::ELSETK,     "ELSETK"},
        {TokenType::NOT,        "NOT"},
        {TokenType::AND,        "AND"},
        {TokenType::OR,         "OR"},
        {TokenType::FORTK,      "FORTK"},
        {TokenType::GETINTTK,   "GETINTTK"},
        {TokenType::PRINTFTK,   "PRINTFTK"},
        {TokenType::RETURNTK,   "RETURNTK"},
        {TokenType::PLUS,       "PLUS"},
        {TokenType::MINU,       "MINU"},
        {TokenType::VOIDTK,     "VOIDTK"},
        {TokenType::MULT,       "MULT"},
        {TokenType::DIV,        "DIV"},
        {TokenType::MOD,        "MOD"},
        {TokenType::LSS,        "LSS"},
        {TokenType::LEQ,        "LEQ"},
        {TokenType::GRE,        "GRE"},
        {TokenType::GEQ,        "GEQ"},
        {TokenType::EQL,        "EQL"},
        {TokenType::NEQ,        "NEQ"},
        {TokenType::ASSIGN,     "ASSIGN"},
        {TokenType::SEMICN,     "SEMICN"},
        {TokenType::COMMA,      "COMMA"},
        {TokenType::LPARENT,    "LPARENT"},
        {TokenType::RPARENT,    "RPARENT"},
        {TokenType::LBRACK,     "LBRACK"},
        {TokenType::RBRACK,     "RBRACK"},
        {TokenType::LBRACE,     "LBRACE"},
        {TokenType::RBRACE,     "RBRACE"},
        {TokenType::UNDEFINED,  "UNDEFINED"}
};